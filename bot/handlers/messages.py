from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters.callback_data import CallbackData
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from bot.utils.file_utils import load_chat_list, load_chat_settings, save_chat_settings, save_chat_list
from datetime import datetime
from aiogram.fsm.state import State, StatesGroup
import json
import logging


logging.basicConfig(level=logging.INFO)
router = Router()
storage = MemoryStorage()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º FSM Storage

chat_list = load_chat_list()
chat_settings = load_chat_settings()

class ImportStates(StatesGroup):
    waiting_for_chat_list = State()
    waiting_for_chat_settings = State()

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è FSM
class AddKeywordStates(StatesGroup):
    waiting_for_keyword = State()
    waiting_for_keyword_removal = State()

# CallbackData –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ —á–∞—Ç–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
class ChatCallbackData(CallbackData, prefix="chat"):
    chat_id: str
    action: str

async def update_message(callback, text, reply_markup=None):
    current_text = callback.message.text
    current_markup = callback.message.reply_markup

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Ä–∞–∑–º–µ—Ç–∫–∞
    if current_text == text and current_markup == reply_markup:
        logging.info("–°–æ–æ–±—â–µ–Ω–∏–µ –∏ —Ä–∞–∑–º–µ—Ç–∫–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ.")
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.message.edit_text(text, reply_markup=reply_markup)

# –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
@router.message(F.chat.type == "private", F.text == "–°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤")
@router.message(F.chat.type == "private", F.text == "–°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤")
async def list_chats(message: Message):
    chat_list = load_chat_list()  # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º chat_list –∏–∑ —Ñ–∞–π–ª–∞

    if not chat_list:
        await message.answer("–ë–æ—Ç –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∏ –≤ –æ–¥–∏–Ω —á–∞—Ç.")
        return

    buttons = [
        [
            InlineKeyboardButton(text=name, callback_data=ChatCallbackData(chat_id=chat_id, action="select").pack())
        ]
        for chat_id, name in chat_list.items()
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —á–∞—Ç–∞
@router.callback_query(ChatCallbackData.filter(F.action == "select"))
async def chat_selected(callback: CallbackQuery, callback_data: ChatCallbackData):
    chat_id = callback_data.chat_id

    buttons = [
        [
            InlineKeyboardButton(
                text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ",
                callback_data=ChatCallbackData(chat_id=chat_id, action="add_keyword").pack()
            ),
            InlineKeyboardButton(
                text="‚ûñ –£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ",
                callback_data=ChatCallbackData(chat_id=chat_id, action="remove_keyword").pack()
            ),
        ],
        [
            InlineKeyboardButton(
                text="üìã –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤",
                callback_data=ChatCallbackData(chat_id=chat_id, action="list_keywords").pack()
            ),
            InlineKeyboardButton(
                text="‚ùå –£–¥–∞–ª–∏—Ç—å –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö",
                callback_data=ChatCallbackData(chat_id=chat_id, action="remove_from_tracking").pack()
            ),
        ],
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É—è —Ñ—É–Ω–∫—Ü–∏—é update_message
    await update_message(
        callback,
        text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —á–∞—Ç {chat_id}. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
@router.callback_query(ChatCallbackData.filter(F.action == "add_keyword"))
async def add_keyword_start(callback: CallbackQuery, callback_data: ChatCallbackData, state: FSMContext):
    chat_id = callback_data.chat_id
    await state.update_data(chat_id=chat_id)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —á–∞—Ç–∞ –≤ FSM
    await state.set_state(AddKeywordStates.waiting_for_keyword)
    await callback.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —á–∞—Ç {chat_id}.")

@router.message(AddKeywordStates.waiting_for_keyword)
async def add_keyword_finish(message: Message, state: FSMContext):
    data = await state.get_data()
    chat_id = data.get("chat_id")
    keyword = message.text.strip()

    chat_settings = load_chat_settings()  # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏

    if not chat_id:
        logging.error("–ß–∞—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω, –Ω–æ —Ñ—É–Ω–∫—Ü–∏—è add_keyword_finish –≤—ã–∑–≤–∞–Ω–∞.")
        await message.answer("–ß–∞—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç.")
        await state.clear()
        return

    if chat_id not in chat_settings:
        chat_settings[chat_id] = {"keywords": [], "banned_users": []}
    if keyword not in chat_settings[chat_id]["keywords"]:
        chat_settings[chat_id]["keywords"].append(keyword)
        save_chat_settings(chat_settings)
        logging.info(f"–î–æ–±–∞–≤–ª–µ–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ '{keyword}' –¥–ª—è —á–∞—Ç–∞ {chat_id}.")
        await message.answer(f"–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ '{keyword}' –¥–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è —á–∞—Ç–∞ {chat_id}.")
    else:
        logging.warning(f"–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ '{keyword}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–ª—è —á–∞—Ç–∞ {chat_id}.")
        await message.answer(f"–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ '{keyword}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —á–∞—Ç–µ {chat_id}.")

    await state.clear()

# –£–¥–∞–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
@router.callback_query(ChatCallbackData.filter(F.action == "remove_keyword"))
async def remove_keyword_start(callback: CallbackQuery, callback_data: ChatCallbackData, state: FSMContext):
    chat_id = callback_data.chat_id
    await state.update_data(chat_id=chat_id)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —á–∞—Ç–∞ –≤ FSM
    await state.set_state(AddKeywordStates.waiting_for_keyword_removal)
    await callback.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —á–∞—Ç–∞ {chat_id}.")

@router.message(AddKeywordStates.waiting_for_keyword_removal)
async def remove_keyword_finish(message: Message, state: FSMContext):
    data = await state.get_data()
    chat_id = data.get("chat_id")
    keyword = message.text.strip()

    if not chat_id:
        await message.answer("–ß–∞—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç.")
        await state.clear()
        return

    if chat_id in chat_settings and keyword in chat_settings[chat_id].get("keywords", []):
        chat_settings[chat_id]["keywords"].remove(keyword)
        save_chat_settings(chat_settings)
        await message.answer(f"–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ '{keyword}' —É–¥–∞–ª–µ–Ω–æ –∏–∑ —á–∞—Ç–∞ {chat_id}.")
    else:
        await message.answer(f"–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ '{keyword}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —á–∞—Ç–µ {chat_id}.")

    await state.clear()

# –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
@router.callback_query(ChatCallbackData.filter(F.action == "list_keywords"))
async def list_keywords(callback: CallbackQuery, callback_data: ChatCallbackData):
    chat_settings = load_chat_settings()  # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    chat_id = callback_data.chat_id
    keywords = chat_settings.get(chat_id, {}).get("keywords", [])

    if keywords:
        await callback.message.answer(f"–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —á–∞—Ç–∞ {chat_id}:\n" + "\n".join(keywords))
    else:
        await callback.message.answer(f"–í —á–∞—Ç–µ {chat_id} –Ω–µ—Ç –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤.")

@router.message(F.text == "–ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ")
async def instant_backup_handler(message: Message):
    try:
        current_time = datetime.now().strftime("%H:%M")
        date = datetime.now().strftime("%d.%m.%Y")

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è
        message_text = (
            f"<b>–í—Ä–µ–º—è –Ω–∞ —á–∞—Å–∞—Ö:</b> {current_time}\n"
            f"<b>–ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞ {date}</b>\n\n"
        )

        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        json_data = {
            "chat-list.json": load_chat_list(),  # –ó–∞–º–µ–Ω—è–µ–º chat_list.json –Ω–∞ chat-list.json
            "chat-settings.json": load_chat_settings(),  # –ó–∞–º–µ–Ω—è–µ–º chat_settings.json –Ω–∞ chat-settings.json
        }

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        for file_name, content in json_data.items():
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º JSON –≤ —Ç–µ–∫—Å—Ç –∏ –∑–∞–º–µ–Ω—è–µ–º "_" –Ω–∞ "-"
            content_str = json.dumps(content, ensure_ascii=False, indent=4).replace("_", "-")
            message_text += (
                f"<b>{file_name}</b>\n"
                f"<pre>{content_str}</pre>\n\n"
            )

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        await message.answer(message_text, parse_mode="HTML")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–º —Ä–µ–∑–µ—Ä–≤–Ω–æ–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")

# –ò–º–ø–æ—Ä—Ç –¥–ª—è chat_list.json
@router.message(F.text == "–ò–º–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è chat_list.json")
async def import_chat_list_start(message: Message, state: FSMContext):
    await state.set_state(ImportStates.waiting_for_chat_list)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ JSON-–¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è chat_list.json.")

@router.message(ImportStates.waiting_for_chat_list)
async def import_chat_list(message: Message, state: FSMContext):
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ JSON
        data = json.loads(message.text)
        if not isinstance(data, dict):
            raise ValueError("–û–∂–∏–¥–∞–µ—Ç—Å—è JSON-–æ–±—ä–µ–∫—Ç (—Å–ª–æ–≤–∞—Ä—å).")

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ chat_list.json
        save_chat_list(data)
        logging.info("chat_list.json —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω.")
        await message.answer("chat_list.json —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω.")
    except json.JSONDecodeError:
        await message.answer("–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ chat_list.json: {e}")
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ chat_list.json: {e}")
    finally:
        await state.clear()

# –ò–º–ø–æ—Ä—Ç –¥–ª—è chat_settings.json
@router.message(F.text == "–ò–º–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è chat_settings.json")
async def import_chat_settings_start(message: Message, state: FSMContext):
    await state.set_state(ImportStates.waiting_for_chat_settings)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ JSON-–¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è chat_settings.json.")

@router.message(ImportStates.waiting_for_chat_settings)
async def import_chat_settings(message: Message, state: FSMContext):
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ JSON
        data = json.loads(message.text)
        if not isinstance(data, dict):
            raise ValueError("–û–∂–∏–¥–∞–µ—Ç—Å—è JSON-–æ–±—ä–µ–∫—Ç (—Å–ª–æ–≤–∞—Ä—å).")

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ chat_settings.json
        save_chat_settings(data)
        logging.info("chat_settings.json —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω.")
        await message.answer("chat_settings.json —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω.")
    except json.JSONDecodeError:
        await message.answer("–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ chat_settings.json: {e}")
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ chat_settings.json: {e}")
    finally:
        await state.clear()

@router.callback_query(ChatCallbackData.filter(F.action == "remove_from_tracking"))
async def remove_from_tracking(callback: CallbackQuery, callback_data: ChatCallbackData):
    chat_id = callback_data.chat_id

    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–æ–≤
        chat_list = load_chat_list()  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        chat_settings = load_chat_settings()

        # –£–¥–∞–ª—è–µ–º —á–∞—Ç –∏–∑ chat_list.json
        if chat_id in chat_list:
            del chat_list[chat_id]
            save_chat_list(chat_list)

        # –£–¥–∞–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞ –∏–∑ chat_settings.json
        if chat_id in chat_settings:
            del chat_settings[chat_id]
            save_chat_settings(chat_settings)

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await callback.message.edit_text(f"–ß–∞—Ç {chat_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —á–∞—Ç–∞ {chat_id}: {e}")
        await callback.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")